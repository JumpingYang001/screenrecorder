//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Atf.ScreenRecorder.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string General_OutputDirectory {
            get {
                return ((string)(this["General_OutputDirectory"]));
            }
            set {
                this["General_OutputDirectory"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool General_HideFromTaskbarIfMinimized {
            get {
                return ((bool)(this["General_HideFromTaskbarIfMinimized"]));
            }
            set {
                this["General_HideFromTaskbarIfMinimized"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool General_MinimizeOnRecord {
            get {
                return ((bool)(this["General_MinimizeOnRecord"]));
            }
            set {
                this["General_MinimizeOnRecord"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+Alt+C")]
        public global::System.Windows.Forms.Keys HotKeys_Cancel {
            get {
                return ((global::System.Windows.Forms.Keys)(this["HotKeys_Cancel"]));
            }
            set {
                this["HotKeys_Cancel"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool HotKeys_Global {
            get {
                return ((bool)(this["HotKeys_Global"]));
            }
            set {
                this["HotKeys_Global"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+Alt+P")]
        public global::System.Windows.Forms.Keys HotKeys_Pause {
            get {
                return ((global::System.Windows.Forms.Keys)(this["HotKeys_Pause"]));
            }
            set {
                this["HotKeys_Pause"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+Alt+R")]
        public global::System.Windows.Forms.Keys HotKeys_Record {
            get {
                return ((global::System.Windows.Forms.Keys)(this["HotKeys_Record"]));
            }
            set {
                this["HotKeys_Record"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+Alt+S")]
        public global::System.Windows.Forms.Keys HotKeys_Stop {
            get {
                return ((global::System.Windows.Forms.Keys)(this["HotKeys_Stop"]));
            }
            set {
                this["HotKeys_Stop"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool Mouse_RecordCursor {
            get {
                return ((bool)(this["Mouse_RecordCursor"]));
            }
            set {
                this["Mouse_RecordCursor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool Mouse_HighlightCursor {
            get {
                return ((bool)(this["Mouse_HighlightCursor"]));
            }
            set {
                this["Mouse_HighlightCursor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("255, 255, 128")]
        public global::System.Drawing.Color Mouse_HighlightCursorColor {
            get {
                return ((global::System.Drawing.Color)(this["Mouse_HighlightCursorColor"]));
            }
            set {
                this["Mouse_HighlightCursorColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("20")]
        public int Mouse_HighlightCursorRadious {
            get {
                return ((int)(this["Mouse_HighlightCursorRadious"]));
            }
            set {
                this["Mouse_HighlightCursorRadious"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Sound_DeviceId {
            get {
                return ((string)(this["Sound_DeviceId"]));
            }
            set {
                this["Sound_DeviceId"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Atf.ScreenRecorder.Sound.SoundFormat Sound_Format {
            get {
                return ((global::Atf.ScreenRecorder.Sound.SoundFormat)(this["Sound_Format"]));
            }
            set {
                this["Sound_Format"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0, 0, 0, 0")]
        public global::System.Drawing.Rectangle Tracking_Bounds {
            get {
                return ((global::System.Drawing.Rectangle)(this["Tracking_Bounds"]));
            }
            set {
                this["Tracking_Bounds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Full")]
        public global::Atf.ScreenRecorder.Screen.TrackingType Tracking_Type {
            get {
                return ((global::Atf.ScreenRecorder.Screen.TrackingType)(this["Tracking_Type"]));
            }
            set {
                this["Tracking_Type"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Video_Compressor {
            get {
                return ((string)(this["Video_Compressor"]));
            }
            set {
                this["Video_Compressor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("20")]
        public int Video_Fps {
            get {
                return ((int)(this["Video_Fps"]));
            }
            set {
                this["Video_Fps"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("75")]
        public int Video_Quality {
            get {
                return ((int)(this["Video_Quality"]));
            }
            set {
                this["Video_Quality"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BottomLeft")]
        public global::System.Drawing.ContentAlignment Watermark_Alignment {
            get {
                return ((global::System.Drawing.ContentAlignment)(this["Watermark_Alignment"]));
            }
            set {
                this["Watermark_Alignment"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DarkGreen")]
        public global::System.Drawing.Color Watermark_Color {
            get {
                return ((global::System.Drawing.Color)(this["Watermark_Color"]));
            }
            set {
                this["Watermark_Color"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool Watermark_Display {
            get {
                return ((bool)(this["Watermark_Display"]));
            }
            set {
                this["Watermark_Display"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Microsoft Sans Serif, 10pt")]
        public global::System.Drawing.Font Watermark_Font {
            get {
                return ((global::System.Drawing.Font)(this["Watermark_Font"]));
            }
            set {
                this["Watermark_Font"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("6, 6, 6, 6")]
        public global::Atf.ScreenRecorder.Screen.Margins Watermark_Margin {
            get {
                return ((global::Atf.ScreenRecorder.Screen.Margins)(this["Watermark_Margin"]));
            }
            set {
                this["Watermark_Margin"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool Watermark_Outline {
            get {
                return ((bool)(this["Watermark_Outline"]));
            }
            set {
                this["Watermark_Outline"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Lime")]
        public global::System.Drawing.Color Watermark_OutlineColor {
            get {
                return ((global::System.Drawing.Color)(this["Watermark_OutlineColor"]));
            }
            set {
                this["Watermark_OutlineColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool Watermark_RightToLeft {
            get {
                return ((bool)(this["Watermark_RightToLeft"]));
            }
            set {
                this["Watermark_RightToLeft"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Recorded by Screen Recorder 1.3")]
        public string Watermark_Text {
            get {
                return ((string)(this["Watermark_Text"]));
            }
            set {
                this["Watermark_Text"] = value;
            }
        }
    }
}
